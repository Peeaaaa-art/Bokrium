name: CI

on:
  pull_request:
    branches: [main]

jobs:
  rubocop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Run RuboCop
        run: bin/rubocop --parallel -f github

  brakeman:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Run Brakeman
        run: bin/brakeman --no-pager

  test:
    runs-on: ubuntu-latest

    env:
      LINE_CHANNEL_TOKEN: dummy_token_for_test
      APP_HOST: http://localhost:3000

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev pkg-config libvips google-chrome-stable curl gnupg

      - name: Install Node.js (v22)
        run: |
          curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
          sudo apt-get install -y nodejs
          node -v
          npm -v

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install JS dependencies
        run: npm install

      - name: Build frontend (Vite)
        run: ./bin/vite build --clear --mode=test

      - name: Prepare DB
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          cp config/database.yml.ci config/database.yml
          bin/rails db:create db:schema:load

      - name: Inject secrets into .env.test
        run: echo "GUEST_USER_EMAIL=${GUEST_USER_EMAIL}" > .env.test
        env:
          GUEST_USER_EMAIL: ${{ secrets.GUEST_USER_EMAIL }}

      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: bundle exec rspec

      - name: Cleanup .env.test
        run: rm -f .env.test

      - name: Collect failed screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: tmp/screenshots
          if-no-files-found: ignore